-- Creating a Database for the project
CREATE OR  REPLACE DATABASE Spotify_Snowflake;

--Creating a Schema to for the tables
CREATE OR REPLACE SCHEMA    Spotify_tables;

--Creating a schema for fileformat for this project
CREATE OR REPLACE SCHEMA    Spotify_file_format;

--Creating a file format for the project
CREATE OR REPLACE FILE FORMAT spotify_snowflake.spotify_file_format.spotify_FF
TYPE=CSV,
FIELD_DELIMITER=",",
SKIP_HEADER=1,
empty_field_as_null=TRUE;


--Creating Storage connection for the project
create or replace storage integration s3_spotify_snowflake
TYPE=EXTERNAL_Stage
STORAGE_Provider=S3
ENABLED=TRUE
Storage_AWS_ROLE_ARN='arn:aws:iam::011528264778:role/spotify_snowflake_etl_pipeline'
Storage_allowed_locations=('s3://spotify-snowflake-etl/')
Comment='S3 storage integration for Spotify Snowflake project';

--Creating Schema for storing stage
CREATE OR REPLACE SCHEMA    Spotify_external_stage_connections;

--Creating a Secure stage connection
CREATE OR REPLACE STAGE spotify_snowflake.spotify_external_stage_connections.spotify_stage
URL='s3://spotify-snowflake-etl'
STORAGE_INTEGRATION=s3_spotify_snowflake
FILE_FORMAT= spotify_snowflake.spotify_file_format.spotify_FF;

--List to view the files that can be accessed from the created stage
list @spotify_snowflake.spotify_external_stage_connections.spotify_stage;

--Description of storage connection created
desc storage integration s3_spotify_snowflake;

-- Creating Tables
--Album Table
CREATE OR REPLACE TABLE spotify_snowflake.spotify_tables.album(
album_id VARCHAR(300) PRIMARY KEY,
name VARCHAR(300),
release_date DATETIME,
total_tracks_in_album INT,
url VARCHAR(1000),
chart_date DATE );

--Artist Table
CREATE OR REPLACE TABLE spotify_snowflake.spotify_tables.artist(
artist_id VARCHAR(300) PRIMARY KEY,
artist_name VARCHAR(300),
external_url VARCHAR(1000),
chart_date DATE );

--Song Table
CREATE OR REPLACE TABLE spotify_snowflake.spotify_tables.song(
song_id VARCHAR(300) PRIMARY KEY,
song_name VARCHAR(500),
duration_ms INT,
url VARCHAR,
popularity INT,
song_added DATETIME,
album_id VARCHAR(300) FOREIGN KEY REFERENCES spotify_snowflake.spotify_tables.album(album_id),
artist_id VARCHAR(300) FOREIGN KEY REFERENCES spotify_snowflake.spotify_tables.artist(artist_id),
chart_date DATE);

--Copy data
--load Album table directly via files present in S3
COPY INTO spotify_snowflake.spotify_tables.album
FROM @spotify_snowflake.spotify_external_stage_connections.spotify_stage
FILE_FORMAT= (FORMAT_Name= spotify_snowflake.spotify_file_format.spotify_FF)
FILEs=('transformed_data/album_data/album_transformed_2024-08-10 23:40:36.992878.csv')
ON_ERROR='CONTINUE';

--Query to validate rows that were not loaded in album table
--Data that was not loaded can be analysed for cause of failure and can be uploaded later
COPY INTO spotify_snowflake.spotify_tables.album
FROM @spotify_snowflake.spotify_external_stage_connections.spotify_stage
FILE_FORMAT= (FORMAT_Name= spotify_snowflake.spotify_file_format.spotify_FF)
FILEs=('transformed_data/album_data/album_transformed_2024-08-10 23:40:36.992878.csv')
VALIDATION_MODE=RETURN_ALL_ERRORS;

--load Artist table
COPY INTO spotify_snowflake.spotify_tables.artist
FROM @spotify_snowflake.spotify_external_stage_connections.spotify_stage
FILE_FORMAT= (FORMAT_Name= spotify_snowflake.spotify_file_format.spotify_FF)
FILEs=('transformed_data/artist_data/artist_transformed_2024-08-10 23:40:36.992878.csv')
ON_ERROR='CONTINUE';

--Query to validate rows that were not loaded in artist table
--Data that was not loaded can be analysed for cause of failure and can be uploaded later
COPY INTO spotify_snowflake.spotify_tables.artist
FROM @spotify_snowflake.spotify_external_stage_connections.spotify_stage
FILE_FORMAT= (FORMAT_Name= spotify_snowflake.spotify_file_format.spotify_FF)
FILEs=('transformed_data/artist_data/artist_transformed_2024-08-10 23:40:36.992878.csv')
VALIDATION_MODE=RETURN_ALL_ERRORS;


--load songs table
COPY INTO spotify_snowflake.spotify_tables.song
FROM @spotify_snowflake.spotify_external_stage_connections.spotify_stage
FILE_FORMAT= (FORMAT_Name= spotify_snowflake.spotify_file_format.spotify_FF)
FILEs=('transformed_data/songs_data/song_transformed_2024-08-10 23:40:36.992878.csv')
ON_ERROR='CONTINUE';

--Query to validate rows that were not loaded in song table
--Data that was not loaded can be analysed for cause of failure and can be uploaded later
COPY INTO spotify_snowflake.spotify_tables.song
FROM @spotify_snowflake.spotify_external_stage_connections.spotify_stage
FILE_FORMAT= (FORMAT_Name= spotify_snowflake.spotify_file_format.spotify_FF)
FILEs=('transformed_data/songs_data/song_transformed_2024-08-10 23:40:36.992878.csv')
VALIDATION_MODE=RETURN_ALL_ERRORS;


--Creating schema for Snowpipes
CREATE OR REPLACE SCHEMA SPOTIFY_SNOWFLAKE.spotify_snowpipes;

--Creating stage for Album Snowpipe
CREATE OR REPLACE STAGE spotify_snowflake.spotify_external_stage_connections.sp_album_stage
URL='s3://spotify-snowflake-etl/transformed_data/album_data/'
STORAGE_INTEGRATION=s3_spotify_snowflake
FILE_FORMAT= spotify_snowflake.spotify_file_format.spotify_FF;

--List to view the data available in album stage
list @spotify_snowflake.spotify_external_stage_connections.sp_album_stage;


--Album Snowpipe
CREATE OR REPLACE PIPE SPOTIFY_SNOWFLAKE.spotify_snowpipes.sp_album
auto_ingest=TRUE
AS
COPY INTO spotify_snowflake.spotify_tables.album
FROM @spotify_snowflake.spotify_external_stage_connections.sp_album_stage
ON_ERROR='CONTINUE';

--Query for Description of Album Snowpipe
Desc pipe SPOTIFY_SNOWFLAKE.spotify_snowpipes.sp_album;

--Query to list the data in album stage
list @spotify_snowflake.spotify_external_stage_connections.sp_album_stage

--Query to view the data in Album table
select * from spotify_snowflake.spotify_tables.album;


--Creating stage for Artist Snowpipe
CREATE OR REPLACE STAGE spotify_snowflake.spotify_external_stage_connections.sp_aritst_stage
URL='s3://spotify-snowflake-etl/transformed_data/artist_data/'
STORAGE_INTEGRATION=s3_spotify_snowflake
FILE_FORMAT= spotify_snowflake.spotify_file_format.spotify_FF;

--Query to list the data in Artist stage
list @spotify_snowflake.spotify_external_stage_connections.sp_aritst_stage;

--Artist Snowpipe
CREATE OR REPLACE PIPE SPOTIFY_SNOWFLAKE.spotify_snowpipes.sp_artist
auto_ingest=TRUE
AS
COPY INTO spotify_snowflake.spotify_tables.artist
FROM @spotify_snowflake.spotify_external_stage_connections.sp_aritst_stage
ON_ERROR='CONTINUE';

--Query to view the description of the artist snowpipe 
Desc pipe SPOTIFY_SNOWFLAKE.spotify_snowpipes.sp_artist;



--Creating stage for Song Snowpipe
CREATE OR REPLACE STAGE spotify_snowflake.spotify_external_stage_connections.sp_song_stage
URL='s3://spotify-snowflake-etl/transformed_data/songs_data/'
STORAGE_INTEGRATION=s3_spotify_snowflake
FILE_FORMAT= spotify_snowflake.spotify_file_format.spotify_FF;

--Query to view the files accessible in the song stage connection
list @spotify_snowflake.spotify_external_stage_connections.sp_song_stage;

--Songs Snowpipe
CREATE OR REPLACE PIPE SPOTIFY_SNOWFLAKE.spotify_snowpipes.sp_songs
auto_ingest=TRUE
AS
COPY INTO spotify_snowflake.spotify_tables.song
FROM @spotify_snowflake.spotify_external_stage_connections.sp_song_stage
ON_ERROR='CONTINUE';

--Query to view the description of the songs snowpipe 
Desc pipe SPOTIFY_SNOWFLAKE.spotify_snowpipes.sp_songs;


